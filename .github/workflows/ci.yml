name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  backend:
    runs-on: ubuntu-latest
    env:
      # 테스트용 SQLite DB (레포 루트 절대경로)
      DATABASE_URL: sqlite+aiosqlite:////${{ github.workspace }}/test.db
      # Alembic이 backend 패키지 임포트 가능하도록
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4

      # Python 3.12 고정
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Show Python/Poetry versions
        run: |
          python -V
          pip --version || true

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry --version

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (backend)
        run: |
          poetry install
          poetry show

      # ✅ 테스트 DB에 마이그레이션 적용 (설정 파일 경로 명시)
      - name: Run Alembic migrations (test DB)
        run: poetry run alembic -c backend/alembic.ini upgrade head

      # pytest가 테스트를 하나도 못 찾으면(exit 5) → 성공 처리
      - name: Run backend tests (skip if none)
        run: |
          set -e
          poetry run pytest -q || rc=$?
          if [ "${rc:-0}" = "5" ]; then
            echo "No backend tests collected. Skipping as success."
            exit 0
          fi
          exit ${rc:-0}

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Run unit tests
        run: npm run test -- --run
        working-directory: frontend

  e2e:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    env:
      HOST: 127.0.0.1
      PORT: 8000
      # E2E용 별도 DB (레포 루트 절대경로)
      DATABASE_URL: sqlite+aiosqlite:////${{ github.workspace }}/e2e.db
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies (frontend)
        run: npm ci
        working-directory: frontend

      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: frontend

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry --version

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          poetry install
          poetry show

      # ✅ E2E DB 마이그레이션 (서버 실행 전) - 설정 파일 경로 명시
      - name: Run Alembic migrations (e2e DB)
        run: poetry run alembic -c backend/alembic.ini upgrade head

      - name: Run backend (background) and wait for health
        env:
          HOST: ${{ env.HOST }}
          PORT: ${{ env.PORT }}
        run: |
          nohup poetry run uvicorn backend.app.main:app --host $HOST --port $PORT > backend.log 2>&1 &
          for i in {1..30}; do
            if curl -fsS "http://$HOST:$PORT/api/v1/healthz" >/dev/null; then
              echo "Backend is up!"
              break
            fi
            echo "Waiting for backend... ($i)"
            sleep 1
          done
          if ! curl -fsS "http://$HOST:$PORT/api/v1/healthz" >/dev/null; then
            echo "Backend failed to start. Dumping logs:"
            cat backend.log || true
            exit 1
          fi

      - name: Run E2E tests
        run: npm run e2e
        working-directory: frontend
